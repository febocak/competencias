{"version":3,"sources":["src/app/tables/tipos-de-competencias/components/tipos-de-competencias-form.component.html","src/app/tables/tipos-de-competencias/components/tipos-de-competencias.component.html","src/app/tables/tipos-de-competencias/components/tipos-de-competencias-form.component.ts","src/app/tables/tipos-de-competencias/components/tipos-de-competencias.component.ts","src/app/tables/tipos-de-competencias/tipos-de-competencias-form-resolver.guard.ts","src/app/tables/tipos-de-competencias/tipos-de-competencias-resolver.guard.ts","src/app/tables/tipos-de-competencias/tipos-de-competencias-routing.module.ts","src/app/tables/tipos-de-competencias/tipos-de-competencias.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-sm-12 col-md-8 col-lg-6 mx-auto\\\">\\r\\n\\r\\n    <div class=\\\"card mt-3\\\">\\r\\n      <div class=\\\"card-header\\\" [ngClass]=\\\"templateData.cardHeaderStyle\\\">\\r\\n        {{ templateData.titulo + \\\" tipo de competencia\\\" }}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <form [formGroup]=\\\"miForm\\\" (ngSubmit)=\\\"onSubmit(submitBtn)\\\">\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"tipo\\\" class=\\\"control-label\\\"> Tipo </label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"tipo\\\" maxlength=\\\"80\\\" [readonly]=\\\"templateData.titulo==='Eliminar'\\\"\\r\\n              [class.is-invalid]=\\\"tipo.invalid && tipo.touched\\\" class=\\\"form-control\\\" />\\r\\n            <small class=\\\"text-danger\\\" [class.d-none]=\\\"tipo.untouched || !tipo.hasError('required')\\\">El tipo es requerido</small>\\r\\n            <small class=\\\"text-danger\\\" [class.d-none]=\\\"tipo.untouched || !tipo.hasError('minlength')\\\">La longitud mínima es 3</small>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"descripcion\\\" class=\\\"control-label\\\"> Descripción </label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"descripcion\\\" maxlength=\\\"80\\\" [readonly]=\\\"templateData.titulo==='Eliminar'\\\"\\r\\n              [class.is-invalid]=\\\"descripcion.invalid && descripcion.touched\\\" class=\\\"form-control\\\" />\\r\\n            <small class=\\\"text-danger\\\" [class.d-none]=\\\"descripcion.untouched || !descripcion.hasError('required')\\\">La descripción es requerida</small>\\r\\n            <small class=\\\"text-danger\\\" [class.d-none]=\\\"descripcion.untouched || !descripcion.hasError('minlength')\\\">La longitud mínima es 10</small>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n              <button [disabled]=\\\"!miForm.valid\\\" #submitBtn\\r\\n                [ngClass]=\\\"templateData.titulo==='Eliminar' ? 'btn-danger' : 'btn-primary'\\\"\\r\\n                type=\\\"submit\\\" class=\\\"btn btn-block\\\">\\r\\n                {{ templateData.titulo === 'Eliminar' ? 'Eliminar' : 'Aceptar' }}\\r\\n              </button>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"goBack()\\\">\\r\\n                Cancelar\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\"","export default \"<div class=\\\"card mt-3\\\">\\r\\n  <div class=\\\"card-header d-flex\\\">\\r\\n    Tipos de competencias\\r\\n    <a routerLink=\\\"/tipos-de-competencias/add\\\" class=\\\"text-primary ml-auto\\\">\\r\\n      <i class=\\\"fa fa-plus-circle fa-2x\\\"></i>\\r\\n    </a>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<table class=\\\"table table-bordered table-hover\\\">\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th> Tipo </th>\\r\\n      <th> Descripción </th>\\r\\n      <th> Distancias </th>\\r\\n      <th> </th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n\\r\\n  <tbody>\\r\\n    <tr *ngFor=\\\"let registro of tabla\\\">\\r\\n      <td routerLink=\\\"/tipos-de-competencias/edit/{{registro.id}}\\\"> {{ registro.tipo }} </td>\\r\\n      <td routerLink=\\\"/tipos-de-competencias/edit/{{registro.id}}\\\"> {{ registro.descripcion }} </td>\\r\\n      <td class=\\\"text-center\\\">\\r\\n        <a routerLink=\\\"/distancias/{{registro.id}}\\\" class=\\\"text-primary\\\">\\r\\n          <i class=\\\"fa fa-cogs fa-2x\\\"></i>\\r\\n        </a>\\r\\n      </td>\\r\\n      <td class=\\\"text-center\\\">\\r\\n        <a routerLink=\\\"/tipos-de-competencias/delete/{{registro.id}}\\\" class=\\\"text-danger\\\">\\r\\n          <i class=\\\"fa fa-minus-circle fa-2x\\\"></i>\\r\\n        </a>\\r\\n      </td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n\\r\\n</table>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\n\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { MessageService } from '@core/message/message.service';\r\nimport { CrudService } from '@services/crud.service';\r\nimport { ArrayService } from '@services/array.service';\r\n\r\nimport { TipoDeCompetenciaI } from '@models/tipo-de-competencia';\r\n\r\n@Component({\r\n  selector: 'app-tipos-de-competencias-form',\r\n  templateUrl: './tipos-de-competencias-form.component.html',\r\n  styles: []\r\n})\r\nexport class TiposDeCompetenciasFormComponent implements OnInit {\r\n  templateData = { titulo: '', cardHeaderStyle: '', id: '' };\r\n  miForm: FormGroup;\r\n\r\n  constructor(\r\n    private crudService: CrudService, \r\n    private fb: FormBuilder,      \r\n    private msg: MessageService,\r\n    private location: Location, \r\n    private actRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private arrayService: ArrayService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.msg.clearMessages();\r\n\r\n    const action = this.actRoute.snapshot.paramMap.get('action');\r\n    this.templateData.titulo = this.getTitle(action);\r\n    this.templateData.cardHeaderStyle = this.getClassHeader(action);\r\n    this.templateData.id = this.actRoute.snapshot.paramMap.get('id');\r\n\r\n    this.buildForm();\r\n    if (this.templateData.titulo !== 'Agregar') {\r\n      this.setFormData();\r\n    }\r\n  }\r\n\r\n  buildForm() {\r\n    this.miForm = this.fb.group({\r\n      tipo: ['', [Validators.required] ],\r\n      descripcion: ['', [Validators.required, Validators.minLength(10)]]\r\n    });\r\n\r\n  }\r\n\r\n  setFormData() {\r\n    const record = this.actRoute.snapshot.data['tipoDeCompetenciaData'][0];\r\n    this.miForm.patchValue(record);\r\n  }\r\n\r\n  get tipo() {\r\n    return this.miForm.get('tipo');\r\n  }\r\n  get descripcion() {\r\n    return this.miForm.get('descripcion');\r\n  }\r\n\r\n  onSubmit(submitBtn: HTMLButtonElement) {\r\n    submitBtn.disabled = true;\r\n    const record = { id: this.templateData.id,...this.miForm.value }\r\n\r\n    if (this.templateData.titulo !== 'Eliminar' && !this.validations(record)) {\r\n      submitBtn.disabled = false;\r\n      return;\r\n    }\r\n    \r\n    switch (this.templateData.titulo) {\r\n      case 'Agregar':\r\n        this.aceptarAgregar(record);\r\n        break;\r\n      case 'Modificar':\r\n        this.aceptarEditar(record);\r\n        break;\r\n      case 'Eliminar':\r\n        this.aceptarEliminar(record);\r\n        break;\r\n    }\r\n \r\n  }\r\n  \r\n  aceptarAgregar(record: TipoDeCompetenciaI) {\r\n    this.crudService.addRecord$('tipos-de-competencias', record).subscribe(\r\n      _ => this.msg.ok(this.miForm.controls['tipo'].value + ' Agregado satisfactoriamente'),\r\n      error => this.msg.error('Error al agregar los datos: ' + error.statusText),\r\n      () => this.router.navigate(['tipos-de-competencias'])\r\n    );\r\n  }\r\n\r\n  aceptarEditar(record: TipoDeCompetenciaI) {\r\n    this.crudService.updateRecord$('tipos-de-competencias', record.id, record).subscribe(\r\n      _ => this.msg.ok(record.tipo + ' Actualizado satisfactoriamente'),\r\n      error => this.msg.error('Error al actualizar los datos: ' + error.statusText),\r\n      () => this.router.navigate(['tipos-de-competencias'])\r\n    );\r\n  }\r\n\r\n  aceptarEliminar(record: TipoDeCompetenciaI) {\r\n    this.crudService.deleteRecord$('tipos-de-competencias', record.id).subscribe(\r\n      _ => this.msg.ok(record.tipo + ' Eliminado satisfactoriamente'),\r\n      error => this.msg.error('Error al eliminar los datos: ' + error.statusText),\r\n      () => this.router.navigate(['tipos-de-competencias'])\r\n    );\r\n  }\r\n\r\n  goBack() {\r\n    this.location.back();\r\n  }\r\n\r\n  getTitle(action: string) {\r\n    const objTitle= {add:'Agregar', edit: 'Modificar', delete: 'Eliminar'};\r\n    return objTitle[action];\r\n  }\r\n  \r\n  getClassHeader(action: string) {\r\n    const objStyle = {add:'bg-primary', edit: 'bg-warning', delete: 'bg-danger'};\r\n    return objStyle[action];\r\n  }\r\n\r\n  validations(record) {\r\n    const tabla = this.actRoute.snapshot.data['tipoDeCompetenciaData'][1];\r\n    const errorMessages = [];\r\n    errorMessages.push('Ya hay otro registro con el mismo tipo');\r\n    errorMessages.push('Ya hay otro registro con la mismas descripción');\r\n    const objSearch = [];\r\n    objSearch.push({ tipo: record.tipo });\r\n    objSearch.push({ descripcion: record.descripcion });\r\n\r\n    for (let i = 0; i < objSearch.length; i++) {\r\n      const encontro = this.arrayService.find(tabla, objSearch[i]);\r\n      if (!!encontro) {\r\n        if (this.templateData.titulo === 'Agregar') {\r\n          this.msg.warning(errorMessages[i]);\r\n          return false;\r\n        } else {\r\n          if(record.id !== encontro.id) {\r\n            this.msg.warning(errorMessages[i]);\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-tipos-de-competencias',\r\n  templateUrl: './tipos-de-competencias.component.html',\r\n  styles: []\r\n})\r\nexport class TiposDeCompetenciasComponent implements OnInit {\r\n  tabla = [];\r\n  constructor( private route: ActivatedRoute ) { }\r\n\r\n  ngOnInit() {\r\n    this.tabla = this.route.snapshot.data['tipoDeCompetenciaData'];\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { CrudService } from '@services/crud.service';\r\nimport { TipoDeCompetenciaI } from '@models/tipo-de-competencia';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TiposDeCompetenciasFormResolver implements Resolve<[ TipoDeCompetenciaI, TipoDeCompetenciaI[] ]> {\r\n\r\n  constructor(private crudService: CrudService) { }\r\n\r\n  resolve(route: ActivatedRouteSnapshot,\r\n          state: RouterStateSnapshot): Observable<[ TipoDeCompetenciaI, TipoDeCompetenciaI[] ]> {\r\n    const id = route.paramMap.get('id');\r\n    const allData$ = forkJoin(\r\n      this.crudService.getRecord$('tipos-de-competencias',id),\r\n      this.crudService.getAllRecords$('tipos-de-competencias','tipo')\r\n    );\r\n    return  allData$;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { CrudService } from '@services/crud.service';\r\nimport { TipoDeCompetenciaI } from '@models/tipo-de-competencia';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TiposDeCompeteciasResolver implements Resolve<TipoDeCompetenciaI[]> {\r\n\r\n  constructor(private crudService: CrudService) { }\r\n\r\n  resolve(route: ActivatedRouteSnapshot,\r\n          state: RouterStateSnapshot): Observable<TipoDeCompetenciaI[]> {\r\n    return this.crudService.getAllRecords$('tipos-de-competencias','tipo');\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TiposDeCompetenciasComponent } from './components/tipos-de-competencias.component';\r\nimport { TiposDeCompetenciasFormComponent } from './components/tipos-de-competencias-form.component';\r\nimport { TiposDeCompeteciasResolver } from './tipos-de-competencias-resolver.guard';\r\nimport { TiposDeCompetenciasFormResolver } from './tipos-de-competencias-form-resolver.guard';\r\n\r\n\r\nconst routes: Routes = [\r\n  { \r\n    path: '', \r\n    resolve: { tipoDeCompetenciaData: TiposDeCompeteciasResolver }, \r\n    component: TiposDeCompetenciasComponent\r\n  },\r\n  { \r\n    path: ':action', \r\n    resolve: { tipoDeCompetenciaData: TiposDeCompetenciasFormResolver }, \r\n    component: TiposDeCompetenciasFormComponent\r\n  },\r\n  { \r\n    path: ':action/:id', \r\n    resolve: { tipoDeCompetenciaData: TiposDeCompetenciasFormResolver }, \r\n    component: TiposDeCompetenciasFormComponent\r\n   }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TiposDeCompetenciasRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { TiposDeCompetenciasRoutingModule } from './tipos-de-competencias-routing.module';\r\nimport { TiposDeCompetenciasComponent } from './components/tipos-de-competencias.component';\r\nimport { TiposDeCompetenciasFormComponent } from './components/tipos-de-competencias-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TiposDeCompetenciasComponent, TiposDeCompetenciasFormComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TiposDeCompetenciasRoutingModule,\r\n    FormsModule, ReactiveFormsModule\r\n  ]\r\n})\r\nexport class TiposDeCompetenciasModule { }\r\n"],"sourceRoot":"webpack:///"}